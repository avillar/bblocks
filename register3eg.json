[
  {
    "itemIdentifier": "r1.geo.common.data_types.ogc_collections",
    "name": "OGC Collections",
    "abstract": "The distribution of a geospatial dataset in an API is organized into one or more collections of data. How the data is split into collections in a distribution depends on the intended use of the data. Two common approaches for organizing the data are: by semantic type and by spatial clustering. The OGC Collections JSON resource provides information about and access to the data in each collection of the distribution.",
    "status": "Valid",
    "dateTimeAddition": "2022-05-24T11:00:05+00:00",
    "itemClass": "ogc-building-block",
    "register": "ogc-building-block-register",
    "version": "0.1",
    "dateOfLastChange": "2022-05-24",
    "link": "https://github.com/opengeospatial/bblocks/blob/master/registereditems/geo/common/json-collections.adoc",
    "sources": ["ogc-api-features"], 
      # rethink these once tags below available...

### these are tags that can be used to group 
    "concept[0..1]": "<uri to a conceptual model class in def server>",
   "maturity": "Mature", #any controlled vocabulary - we can match to a skos:Notation
    "type": "geo" ##any controlled vocabulary - we can match to a skos:Notation
      # type is a bad choice - too overloaded a term here.. suggest "scope" which relates to governance "domain"
    "bbtype" : <parameter/schema/path/api/datatype> - lets fill this in and refine 
      # should we use itemClass at this finer 

## these are resources we need to be able to upload and reference
    "schema" : []
    "ldContext[0..1]": "<uri to a conceptual model class in def server>",
    "example[0..1..?]" : 
      # will pull from schemas if 
      # must have an example - how many? - if an API then we want to deploy a containerised reference implementation
  }
}
  